
# TODO: Output the names of the apps we are going to monitor
output "o11y-as-code-apps" {
  value = toset(var.APPS)
}

# 
# Dashboards
# https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/one_dashboard_json
#

# TODO: Import a dashboard from a JSON file
resource "newrelic_one_dashboard_json" "imported-dashboard" {
  json = file("dashboards/import.json")
}

# TODO: Output the permalink to the imported dashboard
output "my-team-imported-dashboard" {
  value = newrelic_one_dashboard_json.imported-dashboard.permalink
}

# TODO: Create a dashboard from a template file
resource "newrelic_one_dashboard_json" "custom-dashboard" {
  json = templatefile("dashboards/custom.json.tftpl", {
    account_id = var.NEW_RELIC_ACCOUNT_ID,
    applications = var.APPS,
    dashboard_name: "O11yAsCode Dashboard (TF)",
  })
}

# TODO: Output the permalink to the custom dashboard
output "my-team-custom-dashboard" {
  value = newrelic_one_dashboard_json.custom-dashboard.permalink
}

# 
# Tagging Applications
# https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/entity_tags
# 

# TODO: Fetch the apps from New Relic
data "newrelic_entity" "APPS" {
  count = length(var.APPS)
  name  = var.APPS[count.index]
  type = "APPLICATION"
  domain = "APM"
}

# TODO: Output the guids of the apps we are going to monitor
output "o11y_apps" {
  value = data.newrelic_entity.APPS[*].guid
}

# TODO: Tag each app with the team and environment values
resource "newrelic_entity_tags" "APPS" {
  count = length(var.APPS)
  guid  = data.newrelic_entity.APPS[count.index].guid

  dynamic "tag" {
    for_each = var.TAGS
    content {
      key    = tag.key
      values = [tag.value]
    }
  }
}

# 
# Workloads
# https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/workload
#

# TODO: Create a workload using the team tag
resource "newrelic_workload" "O11yAsCode" {
  name = var.MY_TEAM_WORKLOAD_NAME
  account_id = (var.NEW_RELIC_ACCOUNT_ID)

  # Include entities with a set of tags.
  entity_search_query {
    query = var.MY_TEAM_WORKLOAD_QUERY
  }

  entity_guids = [
    newrelic_one_dashboard_json.imported-dashboard.guid,
    newrelic_one_dashboard_json.custom-dashboard.guid,
  ]
}

# TODO: Output the permalink to the workload
output "my-team-workload" {
  value = newrelic_workload.O11yAsCode.permalink
}


#
# Service Level Objectives
# https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/service_level
#

# TODO: Create a Serivce Level Indicator for the latency of your applications
resource "newrelic_service_level" "latency" {
  count = length(var.APPS)
  guid = data.newrelic_entity.APPS[count.index].guid
  name = "Latency for ${var.APPS[count.index]}"
  description = "Proportion of requests that are served faster than a threshold."

  events {
    account_id = var.NEW_RELIC_ACCOUNT_ID
    valid_events {
      from = "Transaction"
      where = "appName = '${var.APPS[count.index]}' AND (transactionType='Web')"
    }
    good_events {
      from = "Transaction"
      where = "appName = '${var.APPS[count.index]}' AND (transactionType= 'Web') AND duration < 0.1"
    }
  }

  objective {
    target = 99.00
    time_window {
      rolling {
        count = 7
        unit = "DAY"
      }
    }
  }
}

# TODO: Create a Serivce Level Indicator for the error rates of your applications
resource "newrelic_service_level" "error-rate" {
  count = length(var.APPS)
  guid = data.newrelic_entity.APPS[count.index].guid
  name = "Error Rate for ${var.APPS[count.index]}"
  description = "Proportion of requests that are returning errors above an acceptable threshold."

  events {
    account_id = var.NEW_RELIC_ACCOUNT_ID
    valid_events {
      from = "Transaction"
      where = "appName = '${var.APPS[count.index]}' AND (transactionType='Web')"
    }
    bad_events {
      from = "Transaction"
      where = "appName = '${var.APPS[count.index]}' AND (transactionType= 'Web') AND error.expected IS FALSE"
    }
  }

  objective {
    target = 99.00
    time_window {
      rolling {
        count = 7
        unit = "DAY"
      }
    }
  }
}

# 
# Synthetics monitor - SSL Check
# https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/synthetics_cert_check_monitor
# 

# TODO: Create a Synthetics monitor to check for valid SSL certificates
resource "newrelic_synthetics_cert_check_monitor" "cert-check-monitor" {
  count                  = length(var.SYNTHETIC_CHECK_SSL)
  name                   = "cert-check-monitor-${var.SYNTHETIC_CHECK_SSL[count.index]}"
  domain                 = "${var.SYNTHETIC_CHECK_SSL[count.index]}"
  # Public minion location
  # https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/#location
  locations_public       = ["AWS_SA_EAST_1", "AWS_US_EAST_1"]
  certificate_expiration = "10"
  period                 = "EVERY_6_HOURS"
  status                 = "ENABLED"
  
  dynamic "tag" {
    for_each = var.TAGS
    content {
      key    = tag.key
      values = [tag.value]
    }
  }
}

# 
# Synthetics monitor - SSL Check
# https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/synthetics_broken_links_monitor
# 

# TODO: Create a Synthetics monitor to check for broken links
resource "newrelic_synthetics_broken_links_monitor" "monitor" {
  count                  = length(var.SYNTHETIC_CHECK_SSL)
  name                   = "broken-links-monitor-${var.SYNTHETIC_CHECK_SSL[count.index]}"

  uri              = "${var.SYNTHETIC_CHECK_SSL[count.index]}"
  # Public minion location
  # https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/#location
  locations_public       = ["AWS_SA_EAST_1", "AWS_US_EAST_1"]
  period                 = "EVERY_6_HOURS"
  status                 = "ENABLED"
  dynamic "tag" {
    for_each = var.TAGS
    content {
      key    = tag.key
      values = [tag.value]
    }
  }
}

# 
# Alerts, Workflows and Notifications
#

# TODO: Create an alert policy for the apps
resource "newrelic_alert_policy" "alert_policies" {
  name = "${var.APPS[count.index]} alert policy (TF)"
  count = length(var.APPS)
  incident_preference = "PER_CONDITION"
}

# TODO: Create an alert condition observing latency of the apps
resource "newrelic_nrql_alert_condition" "Latency" {
  count              = length(var.APPS)
  policy_id          = newrelic_alert_policy.alert_policies[count.index].id
  name               = "${var.APPS[count.index]}-latency-baseline (TF)"
  account_id         = var.NEW_RELIC_ACCOUNT_ID
  type               = var.ALERT_LATENCY.type
  description        = var.ALERT_LATENCY.description
  enabled            = var.ALERT_LATENCY.enabled
  aggregation_method = var.ALERT_LATENCY.aggregation_method
  aggregation_delay  = var.ALERT_LATENCY.aggregation_delay
  baseline_direction = var.ALERT_LATENCY.baseline_direction
  slide_by           = var.ALERT_LATENCY.slide_by
  
  nrql {
    query = replace(var.ALERT_LATENCY.query, "__APP_NAME__", var.APPS[count.index])
  }
  
  critical {
    operator              = var.ALERT_LATENCY.critical_operator
    threshold             = var.ALERT_LATENCY.critical_threshold
    threshold_duration    = var.ALERT_LATENCY.critical_threshold_duration
    threshold_occurrences = var.ALERT_LATENCY.critical_threshold_occurrences
  }

  warning {
    operator              = var.ALERT_LATENCY.warning_operator
    threshold             = var.ALERT_LATENCY.warning_threshold
    threshold_duration    = var.ALERT_LATENCY.warning_threshold_duration
    threshold_occurrences = var.ALERT_LATENCY.warning_threshold_occurrences
  }
}

# TODO: Create an alert condition observing error rates of the apps
resource "newrelic_nrql_alert_condition" "ErrorRate" {
  count              = length(var.APPS)
  policy_id          = newrelic_alert_policy.alert_policies[count.index].id
  name               = "${var.APPS[count.index]}-error-rate-baseline (TF)"
  account_id         = var.NEW_RELIC_ACCOUNT_ID
  type               = var.ALERT_ERROR_RATE.type
  description        = var.ALERT_ERROR_RATE.description
  enabled            = var.ALERT_ERROR_RATE.enabled
  aggregation_method = var.ALERT_ERROR_RATE.aggregation_method
  aggregation_delay  = var.ALERT_ERROR_RATE.aggregation_delay
  baseline_direction = var.ALERT_ERROR_RATE.baseline_direction
  slide_by           = var.ALERT_ERROR_RATE.slide_by
  
  nrql {
    query = replace(var.ALERT_ERROR_RATE.query, "__APP_NAME__", var.APPS[count.index])
  }
  
  critical {
    operator              = var.ALERT_ERROR_RATE.critical_operator
    threshold             = var.ALERT_ERROR_RATE.critical_threshold
    threshold_duration    = var.ALERT_ERROR_RATE.critical_threshold_duration
    threshold_occurrences = var.ALERT_ERROR_RATE.critical_threshold_occurrences
  }

  warning {
    operator              = var.ALERT_ERROR_RATE.warning_operator
    threshold             = var.ALERT_ERROR_RATE.warning_threshold
    threshold_duration    = var.ALERT_ERROR_RATE.warning_threshold_duration
    threshold_occurrences = var.ALERT_ERROR_RATE.warning_threshold_occurrences
  }
}

# TODO: Create an alert condition observing traffic of the apps
resource "newrelic_nrql_alert_condition" "Traffic" {
  count              = length(var.APPS)
  policy_id          = newrelic_alert_policy.alert_policies[count.index].id
  name               = "${var.APPS[count.index]}-traffic-baseline (TF)"
  account_id         = var.NEW_RELIC_ACCOUNT_ID
  type               = var.ALERT_TRAFFIC.type
  description        = var.ALERT_TRAFFIC.description
  enabled            = var.ALERT_TRAFFIC.enabled
  aggregation_method = var.ALERT_TRAFFIC.aggregation_method
  aggregation_delay  = var.ALERT_TRAFFIC.aggregation_delay
  baseline_direction = var.ALERT_TRAFFIC.baseline_direction
  slide_by           = var.ALERT_TRAFFIC.slide_by
  
  nrql {
    query = replace(var.ALERT_TRAFFIC.query, "__APP_NAME__", var.APPS[count.index])
  }
  
  critical {
    operator              = var.ALERT_TRAFFIC.critical_operator
    threshold             = var.ALERT_TRAFFIC.critical_threshold
    threshold_duration    = var.ALERT_TRAFFIC.critical_threshold_duration
    threshold_occurrences = var.ALERT_TRAFFIC.critical_threshold_occurrences
  }

  warning {
    operator              = var.ALERT_TRAFFIC.warning_operator
    threshold             = var.ALERT_TRAFFIC.warning_threshold
    threshold_duration    = var.ALERT_TRAFFIC.warning_threshold_duration
    threshold_occurrences = var.ALERT_TRAFFIC.warning_threshold_occurrences
  }
}

# TODO: Create an alert condition observing saturation of the apps
resource "newrelic_nrql_alert_condition" "Saturation" {
  count              = length(var.APPS)
  policy_id          = newrelic_alert_policy.alert_policies[count.index].id
  name               = "${var.APPS[count.index]}-saturation-baseline (TF)"
  account_id         = var.NEW_RELIC_ACCOUNT_ID
  type               = var.ALERT_SATURATION.type
  description        = var.ALERT_SATURATION.description
  enabled            = var.ALERT_SATURATION.enabled
  aggregation_method = var.ALERT_SATURATION.aggregation_method
  aggregation_delay  = var.ALERT_SATURATION.aggregation_delay
  baseline_direction = var.ALERT_SATURATION.baseline_direction
  slide_by           = var.ALERT_SATURATION.slide_by
  
  nrql {
    query = replace(var.ALERT_SATURATION.query, "__APP_NAME__", var.APPS[count.index])
  }
  
  critical {
    operator              = var.ALERT_SATURATION.critical_operator
    threshold             = var.ALERT_SATURATION.critical_threshold
    threshold_duration    = var.ALERT_SATURATION.critical_threshold_duration
    threshold_occurrences = var.ALERT_SATURATION.critical_threshold_occurrences
  }

  warning {
    operator              = var.ALERT_SATURATION.warning_operator
    threshold             = var.ALERT_SATURATION.warning_threshold
    threshold_duration    = var.ALERT_SATURATION.warning_threshold_duration
    threshold_occurrences = var.ALERT_SATURATION.warning_threshold_occurrences
  }
}

# TODO: Create a workflow for each apps
resource "newrelic_workflow" "Workflow" {
  for_each           = toset(var.APPS)
  name                  = "Workflow ${each.key} (TF)"
  account_id            = var.NEW_RELIC_ACCOUNT_ID
  muting_rules_handling = "NOTIFY_ALL_ISSUES"
  
  issues_filter {
    name = "Filter-name"
    type = "FILTER"
    predicate {
      attribute = "accumulations.policyName"
      operator  = "CONTAINS"
      values    = ["O11yAsCode-${each.key}"]
    }
  }
  destination {
    channel_id = newrelic_notification_channel.alert_notification_email.id
  }
}

# TODO: Create an email notification destination using the email variable
resource "newrelic_notification_destination" "alert_email_destination" {
  name = "email"
  type = "EMAIL"

  property {
    key   = "email"
    value = var.ALERT_NOTIFICATION_EMAIL
  }
}

# TODO: Create an email notification channel using the email destination
resource "newrelic_notification_channel" "alert_notification_email" {
  account_id     = var.NEW_RELIC_ACCOUNT_ID
  name           = "email"
  type           = "EMAIL"
  destination_id = newrelic_notification_destination.alert_email_destination.id
  product        = "IINT"

  property {
    key   = "subject"
    value = "name: {{ alert_notification_email }}"
  }
}